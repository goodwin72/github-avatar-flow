{"ast":null,"code":"import _createClass from \"C:\\\\Users\\\\Jared\\\\Documents\\\\Web\\\\GitHub Avatar Flow\\\\github-avatar-flow\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Jared\\\\Documents\\\\Web\\\\GitHub Avatar Flow\\\\github-avatar-flow\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Jared\\\\Documents\\\\Web\\\\GitHub Avatar Flow\\\\github-avatar-flow\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Jared\\\\Documents\\\\Web\\\\GitHub Avatar Flow\\\\github-avatar-flow\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _classCallCheck from \"C:\\\\Users\\\\Jared\\\\Documents\\\\Web\\\\GitHub Avatar Flow\\\\github-avatar-flow\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nvar _jsxFileName = \"C:\\\\Users\\\\Jared\\\\Documents\\\\Web\\\\GitHub Avatar Flow\\\\github-avatar-flow\\\\client\\\\src\\\\AvatarList.js\";\nimport React, { Component } from 'react';\nimport './styles/AvatarList.css';\nvar STARTING_REPO = 999;\n\nvar User = function User(username, id, avatarURL, followersURL) {\n  _classCallCheck(this, User);\n\n  this.login = username;\n  this.id = id;\n  this.avatarURL = avatarURL;\n  this.followersURL = followersURL;\n  /* Set explicitly to 'undefined' because we don't know whether they do or don't exist\n   * for this user yet. */\n\n  this.followers = undefined;\n};\n\nvar AvatarList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AvatarList, _Component);\n\n  function AvatarList(props) {\n    var _this;\n\n    _classCallCheck(this, AvatarList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AvatarList).call(this, props));\n    _this.state = {\n      'users': []\n    };\n    return _this;\n  }\n\n  _createClass(AvatarList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      fetch(\"http://localhost:3000/repos?since=\".concat(STARTING_REPO)).then(function (response) {\n        return response.json();\n      }).then(function (response) {\n        console.log(response);\n        var responseUsers = JSON.parse(JSON.stringify(response)).map(function (value) {\n          return new User(value.login, value.id, value.avatar_url, value.followers_url);\n        }); // slice(0) creates a new array instead of copying a reference\n\n        var newUsers = _this2.removeDuplicates(_this2.state.users.slice(0).concat(responseUsers));\n\n        console.log(\"New users: \", newUsers);\n\n        _this2.setState({\n          'users': newUsers\n        });\n      }).catch(function (error) {\n        console.log(error);\n        return Promise.reject(error);\n      });\n    }\n  }, {\n    key: \"removeDuplicates\",\n    value: function removeDuplicates(arr) {\n      console.log(arr);\n      return arr.filter(function (value, valueIndex) {\n        return arr.indexOf(value) === valueIndex;\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var avatars = this.state.users.map(function (value) {\n        return React.createElement(\"li\", {\n          key: value.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: value.avatarURL,\n          alt: \"\".concat(value.login, \"'s avatar\"),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        }));\n      });\n      return React.createElement(\"div\", {\n        className: \"avatarList\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, avatars));\n    }\n  }]);\n\n  return AvatarList;\n}(Component);\n\nexport default AvatarList;","map":{"version":3,"sources":["C:\\Users\\Jared\\Documents\\Web\\GitHub Avatar Flow\\github-avatar-flow\\client\\src\\AvatarList.js"],"names":["React","Component","STARTING_REPO","User","username","id","avatarURL","followersURL","login","followers","undefined","AvatarList","props","state","fetch","then","response","json","console","log","responseUsers","JSON","parse","stringify","map","value","avatar_url","followers_url","newUsers","removeDuplicates","users","slice","concat","setState","catch","error","Promise","reject","arr","filter","valueIndex","indexOf","avatars"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,yBAAP;AAEA,IAAMC,aAAa,GAAG,GAAtB;;IAEMC,I,GACJ,cAAYC,QAAZ,EAAsBC,EAAtB,EAA0BC,SAA1B,EAAqCC,YAArC,EAAmD;AAAA;;AACjD,OAAKC,KAAL,GAAaJ,QAAb;AACA,OAAKC,EAAL,GAAUA,EAAV;AACA,OAAKC,SAAL,GAAiBA,SAAjB;AACA,OAAKC,YAAL,GAAoBA,YAApB;AAEA;;;AAEA,OAAKE,SAAL,GAAiBC,SAAjB;AACD,C;;IAGGC,U;;;;;AACJ,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,oFAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACX,eAAS;AADE,KAAb;AAHiB;AAMlB;;;;wCAEmB;AAAA;;AAClBC,MAAAA,KAAK,6CAAsCZ,aAAtC,EAAL,CACGa,IADH,CACQ,UAACC,QAAD,EAAc;AAClB,eAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,OAHH,EAIGF,IAJH,CAIQ,UAACC,QAAD,EAAc;AAClBE,QAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACA,YAAII,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeP,QAAf,CAAX,EAAqCQ,GAArC,CAAyC,UAACC,KAAD,EAAW;AACtE,iBAAO,IAAItB,IAAJ,CAASsB,KAAK,CAACjB,KAAf,EAAsBiB,KAAK,CAACpB,EAA5B,EAAgCoB,KAAK,CAACC,UAAtC,EAAkDD,KAAK,CAACE,aAAxD,CAAP;AACD,SAFmB,CAApB,CAFkB,CAMlB;;AACA,YAAIC,QAAQ,GAAG,MAAI,CAACC,gBAAL,CAAsB,MAAI,CAAChB,KAAL,CAAWiB,KAAX,CAAiBC,KAAjB,CAAuB,CAAvB,EAA0BC,MAA1B,CAAiCZ,aAAjC,CAAtB,CAAf;;AAEAF,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BS,QAA3B;;AAEA,QAAA,MAAI,CAACK,QAAL,CAAc;AACZ,mBAASL;AADG,SAAd;AAGD,OAlBH,EAmBGM,KAnBH,CAmBS,UAACC,KAAD,EAAW;AAChBjB,QAAAA,OAAO,CAACC,GAAR,CAAYgB,KAAZ;AACA,eAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,OAtBH;AAuBD;;;qCAEgBG,G,EAAK;AACpBpB,MAAAA,OAAO,CAACC,GAAR,CAAYmB,GAAZ;AACA,aAAOA,GAAG,CAACC,MAAJ,CAAW,UAACd,KAAD,EAAQe,UAAR,EAAuB;AACvC,eAAOF,GAAG,CAACG,OAAJ,CAAYhB,KAAZ,MAAuBe,UAA9B;AACD,OAFM,CAAP;AAGD;;;6BAEQ;AACP,UAAME,OAAO,GAAG,KAAK7B,KAAL,CAAWiB,KAAX,CAAiBN,GAAjB,CAAqB,UAACC,KAAD,EAAW;AAC9C,eACE;AAAI,UAAA,GAAG,EAAEA,KAAK,CAACpB,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAK,UAAA,GAAG,EAAEoB,KAAK,CAACnB,SAAhB;AAA2B,UAAA,GAAG,YAAKmB,KAAK,CAACjB,KAAX,cAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CADF;AAKD,OANe,CAAhB;AAOA,aACE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGkC,OADH,CADF,CADF;AAOD;;;;EAzDsBzC,S;;AA4DzB,eAAeU,UAAf","sourcesContent":["import React, { Component } from 'react';\nimport './styles/AvatarList.css';\n\nconst STARTING_REPO = 999;\n\nclass User {\n  constructor(username, id, avatarURL, followersURL) {\n    this.login = username;\n    this.id = id;\n    this.avatarURL = avatarURL;\n    this.followersURL = followersURL;\n\n    /* Set explicitly to 'undefined' because we don't know whether they do or don't exist\n     * for this user yet. */\n    this.followers = undefined;\n  }\n}\n\nclass AvatarList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      'users': [],\n    };\n  }\n\n  componentDidMount() {\n    fetch(`http://localhost:3000/repos?since=${STARTING_REPO}`)\n      .then((response) => {\n        return response.json();\n      })\n      .then((response) => {\n        console.log(response);\n        let responseUsers = JSON.parse(JSON.stringify(response)).map((value) => {\n          return new User(value.login, value.id, value.avatar_url, value.followers_url);\n        });\n\n        // slice(0) creates a new array instead of copying a reference\n        let newUsers = this.removeDuplicates(this.state.users.slice(0).concat(responseUsers));\n\n        console.log(\"New users: \", newUsers);\n\n        this.setState({\n          'users': newUsers,\n        });\n      })\n      .catch((error) => {\n        console.log(error);\n        return Promise.reject(error);\n      });\n  }\n\n  removeDuplicates(arr) {\n    console.log(arr);\n    return arr.filter((value, valueIndex) => {\n      return arr.indexOf(value) === valueIndex;\n    });\n  }\n\n  render() {\n    const avatars = this.state.users.map((value) => {\n      return (\n        <li key={value.id}>\n          <img src={value.avatarURL} alt={`${value.login}'s avatar`} />\n        </li>\n      );\n    });\n    return (\n      <div className='avatarList'>\n        <ul>\n          {avatars}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default AvatarList;\n"]},"metadata":{},"sourceType":"module"}