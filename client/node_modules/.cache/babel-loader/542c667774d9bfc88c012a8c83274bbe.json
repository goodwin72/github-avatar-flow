{"ast":null,"code":"import _createClass from \"C:\\\\Users\\\\Jared\\\\Documents\\\\Web\\\\GitHub Avatar Flow\\\\github-avatar-flow\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Jared\\\\Documents\\\\Web\\\\GitHub Avatar Flow\\\\github-avatar-flow\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Jared\\\\Documents\\\\Web\\\\GitHub Avatar Flow\\\\github-avatar-flow\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Jared\\\\Documents\\\\Web\\\\GitHub Avatar Flow\\\\github-avatar-flow\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _classCallCheck from \"C:\\\\Users\\\\Jared\\\\Documents\\\\Web\\\\GitHub Avatar Flow\\\\github-avatar-flow\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nvar _jsxFileName = \"C:\\\\Users\\\\Jared\\\\Documents\\\\Web\\\\GitHub Avatar Flow\\\\github-avatar-flow\\\\client\\\\src\\\\AvatarList.js\";\nimport React, { Component } from 'react';\nimport Avatar from './Avatar';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './styles/AvatarList.css';\nvar STARTING_REPO = 999;\n\nvar User = function User(login, id, avatarURL, followersURL) {\n  _classCallCheck(this, User);\n\n  this.login = login;\n  this.id = id;\n  this.avatarURL = avatarURL;\n  this.followersURL = followersURL;\n  /* Set explicitly to 'undefined' because we don't know whether they do or don't exist\n   * for this user yet. */\n\n  this.followers = undefined;\n};\n\nvar AvatarList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AvatarList, _Component);\n\n  function AvatarList(props) {\n    var _this;\n\n    _classCallCheck(this, AvatarList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AvatarList).call(this, props));\n    _this.state = {\n      'users': [],\n      'loading': true\n    };\n    return _this;\n  }\n\n  _createClass(AvatarList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      fetch(\"http://localhost:3000/repos?since=\".concat(STARTING_REPO)).then(function (response) {\n        return response.json();\n      }).then(function (response) {\n        // console.log(response);\n        var responseUsers = JSON.parse(JSON.stringify(response)).map(function (value) {\n          return new User(value.login, value.id, value.avatar_url, value.followers_url);\n        }); // slice(0) creates a new array instead of copying a reference\n\n        var newUsers = _this2.removeDuplicateUsers(responseUsers);\n\n        _this2.setState({\n          'users': newUsers,\n          'loading': false\n        });\n      }).catch(function (error) {\n        console.log(error);\n\n        _this2.setState({\n          'loading': false\n        });\n\n        return Promise.reject(error);\n      });\n    }\n  }, {\n    key: \"removeDuplicateUsers\",\n    value: function removeDuplicateUsers(users) {\n      console.log('Prior to filter: ', users);\n      var filteredUsers = [];\n\n      for (var currentUser = 0; currentUser < users.length; currentUser += 1) {\n        var foundDuplicate = false;\n\n        for (var previousUser = 0; previousUser < currentUser; previousUser += 1) {\n          if (users[currentUser].id === users[previousUser].id) {\n            foundDuplicate = true;\n          }\n        }\n\n        if (!foundDuplicate) {\n          filteredUsers.push(users[currentUser]);\n        }\n      }\n\n      console.log('After filter: ', filteredUsers);\n      return filteredUsers;\n    }\n  }, {\n    key: \"avatarHoverShow\",\n    value: function avatarHoverShow() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      var avatars = this.state.users.map(function (value) {\n        return React.createElement(\"li\", {\n          className: \"avatar__li\",\n          key: value.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88\n          },\n          __self: this\n        }, React.createElement(Avatar, {\n          props: value,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89\n          },\n          __self: this\n        }));\n      });\n      var loading;\n\n      if (this.state.loading) {\n        loading = React.createElement(\"p\", {\n          className: \"alert alert-primary\",\n          role: \"alert\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        }, \"Loading...\");\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(\"ul\", {\n        className: \"d-flex flex-wrap list-unstyled\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, avatars), loading);\n    }\n  }]);\n\n  return AvatarList;\n}(Component);\n\nexport default AvatarList;","map":{"version":3,"sources":["C:\\Users\\Jared\\Documents\\Web\\GitHub Avatar Flow\\github-avatar-flow\\client\\src\\AvatarList.js"],"names":["React","Component","Avatar","STARTING_REPO","User","login","id","avatarURL","followersURL","followers","undefined","AvatarList","props","state","fetch","then","response","json","responseUsers","JSON","parse","stringify","map","value","avatar_url","followers_url","newUsers","removeDuplicateUsers","setState","catch","error","console","log","Promise","reject","users","filteredUsers","currentUser","length","foundDuplicate","previousUser","push","avatars","loading"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAO,sCAAP;AACA,OAAO,yBAAP;AAEA,IAAMC,aAAa,GAAG,GAAtB;;IAEMC,I,GACJ,cAAYC,KAAZ,EAAmBC,EAAnB,EAAuBC,SAAvB,EAAkCC,YAAlC,EAAgD;AAAA;;AAC9C,OAAKH,KAAL,GAAaA,KAAb;AACA,OAAKC,EAAL,GAAUA,EAAV;AACA,OAAKC,SAAL,GAAiBA,SAAjB;AACA,OAAKC,YAAL,GAAoBA,YAApB;AAEA;;;AAEA,OAAKC,SAAL,GAAiBC,SAAjB;AACD,C;;IAGGC,U;;;;;AACJ,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,oFAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACX,eAAS,EADE;AAEX,iBAAW;AAFA,KAAb;AAHiB;AAOlB;;;;wCAEmB;AAAA;;AAClBC,MAAAA,KAAK,6CAAsCX,aAAtC,EAAL,CACGY,IADH,CACQ,UAACC,QAAD,EAAc;AAClB,eAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,OAHH,EAIGF,IAJH,CAIQ,UAACC,QAAD,EAAc;AAClB;AACA,YAAIE,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeL,QAAf,CAAX,EAAqCM,GAArC,CAAyC,UAACC,KAAD,EAAW;AACtE,iBAAO,IAAInB,IAAJ,CAASmB,KAAK,CAAClB,KAAf,EAAsBkB,KAAK,CAACjB,EAA5B,EAAgCiB,KAAK,CAACC,UAAtC,EAAkDD,KAAK,CAACE,aAAxD,CAAP;AACD,SAFmB,CAApB,CAFkB,CAMlB;;AACA,YAAIC,QAAQ,GAAG,MAAI,CAACC,oBAAL,CAA0BT,aAA1B,CAAf;;AAEA,QAAA,MAAI,CAACU,QAAL,CAAc;AACZ,mBAASF,QADG;AAEZ,qBAAW;AAFC,SAAd;AAID,OAjBH,EAkBGG,KAlBH,CAkBS,UAACC,KAAD,EAAW;AAChBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;;AACA,QAAA,MAAI,CAACF,QAAL,CAAc;AACZ,qBAAW;AADC,SAAd;;AAIA,eAAOK,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACD,OAzBH;AA0BD;;;yCAEoBK,K,EAAO;AAC1BJ,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCG,KAAjC;AACA,UAAIC,aAAa,GAAG,EAApB;;AAEA,WAAK,IAAIC,WAAW,GAAG,CAAvB,EAA0BA,WAAW,GAAGF,KAAK,CAACG,MAA9C,EAAsDD,WAAW,IAAI,CAArE,EAAwE;AACtE,YAAIE,cAAc,GAAG,KAArB;;AACA,aAAK,IAAIC,YAAY,GAAG,CAAxB,EAA2BA,YAAY,GAAGH,WAA1C,EAAuDG,YAAY,IAAI,CAAvE,EAA0E;AACxE,cAAIL,KAAK,CAACE,WAAD,CAAL,CAAmB/B,EAAnB,KAA0B6B,KAAK,CAACK,YAAD,CAAL,CAAoBlC,EAAlD,EAAsD;AACpDiC,YAAAA,cAAc,GAAG,IAAjB;AACD;AACF;;AAED,YAAI,CAACA,cAAL,EAAqB;AACnBH,UAAAA,aAAa,CAACK,IAAd,CAAmBN,KAAK,CAACE,WAAD,CAAxB;AACD;AACF;;AACDN,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BI,aAA9B;AAEA,aAAOA,aAAP;AACD;;;sCAEgB,CAEhB;;;6BAEQ;AACP,UAAMM,OAAO,GAAG,KAAK7B,KAAL,CAAWsB,KAAX,CAAiBb,GAAjB,CAAqB,UAACC,KAAD,EAAW;AAC9C,eACE;AAAI,UAAA,SAAS,EAAC,YAAd;AAA2B,UAAA,GAAG,EAAEA,KAAK,CAACjB,EAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,MAAD;AAAQ,UAAA,KAAK,EAAEiB,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CADF;AAKD,OANe,CAAhB;AAQA,UAAIoB,OAAJ;;AACA,UAAI,KAAK9B,KAAL,CAAW8B,OAAf,EAAwB;AACtBA,QAAAA,OAAO,GAAG;AAAG,UAAA,SAAS,EAAC,qBAAb;AAAmC,UAAA,IAAI,EAAC,OAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAV;AACD;;AAED,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAI,QAAA,SAAS,EAAC,gCAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGD,OADH,CADF,EAIGC,OAJH,CADF;AAQD;;;;EAtFsB1C,S;;AAyFzB,eAAeU,UAAf","sourcesContent":["import React, { Component } from 'react';\nimport Avatar from './Avatar';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './styles/AvatarList.css';\n\nconst STARTING_REPO = 999;\n\nclass User {\n  constructor(login, id, avatarURL, followersURL) {\n    this.login = login;\n    this.id = id;\n    this.avatarURL = avatarURL;\n    this.followersURL = followersURL;\n\n    /* Set explicitly to 'undefined' because we don't know whether they do or don't exist\n     * for this user yet. */\n    this.followers = undefined;\n  }\n}\n\nclass AvatarList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      'users': [],\n      'loading': true,\n    };\n  }\n\n  componentDidMount() {\n    fetch(`http://localhost:3000/repos?since=${STARTING_REPO}`)\n      .then((response) => {\n        return response.json();\n      })\n      .then((response) => {\n        // console.log(response);\n        let responseUsers = JSON.parse(JSON.stringify(response)).map((value) => {\n          return new User(value.login, value.id, value.avatar_url, value.followers_url);\n        });\n\n        // slice(0) creates a new array instead of copying a reference\n        let newUsers = this.removeDuplicateUsers(responseUsers);\n\n        this.setState({\n          'users': newUsers,\n          'loading': false,\n        });\n      })\n      .catch((error) => {\n        console.log(error);\n        this.setState({\n          'loading': false,\n        });\n\n        return Promise.reject(error);\n      });\n  }\n\n  removeDuplicateUsers(users) {\n    console.log('Prior to filter: ', users);\n    let filteredUsers = [];\n\n    for (let currentUser = 0; currentUser < users.length; currentUser += 1) {\n      let foundDuplicate = false;\n      for (let previousUser = 0; previousUser < currentUser; previousUser += 1) {\n        if (users[currentUser].id === users[previousUser].id) {\n          foundDuplicate = true;\n        }\n      }\n\n      if (!foundDuplicate) {\n        filteredUsers.push(users[currentUser]);\n      }\n    }\n    console.log('After filter: ', filteredUsers);\n\n    return filteredUsers;\n  }\n\n  avatarHoverShow(){\n\n  }\n\n  render() {\n    const avatars = this.state.users.map((value) => {\n      return (\n        <li className='avatar__li' key={value.id}>\n          <Avatar props={value} />\n        </li>\n      );\n    });\n\n    let loading;\n    if (this.state.loading) {\n      loading = <p className='alert alert-primary' role='alert'>Loading...</p>;\n    }\n\n    return (\n      <div>\n        <ul className='d-flex flex-wrap list-unstyled'>\n          {avatars}\n        </ul>\n        {loading}\n      </div>\n    );\n  }\n}\n\nexport default AvatarList;\n"]},"metadata":{},"sourceType":"module"}